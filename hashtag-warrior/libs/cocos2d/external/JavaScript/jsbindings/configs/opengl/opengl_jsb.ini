[opengl]

# You can extend the functionality by using plugins
# Basically you can override the functionality of the converters
plugin = function_class = plugin_jsb_gl.JSBGenerateFunctions_GL,

# JS namespace. By default it is the same as config file namespace.
# This namespace is used then the script autogenerates JS code. eg: with the constants
js_namespace = gl

# prefix that will be removed from the ObjC classes in order to generate the JS classes
# ex: If the class name is CCNode, then on JavaScript it will be Node
## None, since OpenGL has no Objective-C classes
obj_class_prefix_to_remove =

# Classes to generate. Use '*' to generate all the parsed classes.
# Subclasses will be parsed as well.
# ex: If CCSprite is parsed, then CCNode and NSObject will be parsed as well
# It supports regular expressions to match class names.
# eg: all cocos2d actions ending in 'By': CC(.*)By
## None, since OpenGL has no Objective-C classes
classes_to_parse =

# Classes to ignore.
# It is a good idea to add classes that you don't want to have a proxy object. Usually internal classes,
# or classes that are already native on JavaScript should be added here.
# It supports regular expressions to match class names.
# eg: all NS classes: NS(.*)
## None, since OpenGL has no Objective-C classes
classes_to_ignore =

# Class properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
class_properties =

# Whether or not to generate constructors from base classes for the current class.
# In JavaScript, the "constructors" or "static methods" are not "inherited".
# It is recommended to set it to "auto".
# Options:
#    False: Don't inherited
#    True: Inherit all class methods from all ancestors
#    Auto: Inherit only if it has no class constructors. Stop when the fist class constructor is added.
## Ignored, since OpenGL has no classes
inherit_class_methods = Auto

# Method properties
# options:
#   name:"js_name"         Rename methods.
#   ignore                 This method will be ignored.
#   callback               This method is a callback. It will be invoked from Objective-C
#   optional_args_since:2  It means that all arguments starting from the 2nd argument are optionals
#   variadic_2_array       It means that all arguments are variadic, and an Array will be created with them
## None, since OpenGL ES has not methods
method_properties =

# Files that are going to be imported by the auto-generated files.
# Useful to declare subclasses of an already bound project
# eg: manual bindings for NSObject
import_files = jsb_opengl_manual.h

compatible_with_cpp = True

# The prefix will be removed from function name.
# eg: if the C function is "cpBodyAddShape", then the JS name will be "bodyWithAddShape"
## For OpenGL ES add "gl"
function_prefix_to_remove = gl

# Free functions to be parsed
functions_to_parse = gl(.*)

# Free functions not to parse
## Add here all the functions that should not be bound
functions_to_ignore = glGetTexParameteriv, glGetUniformiv,

# Free functions properties
# Options
#  manual               Means that the class is manually bound. No binding info will generated, but it can be used.
#  name:"newname"       New name of the class
function_properties =
						glGenBuffers = name:"_createBuffer"; manual,
						glGenFramebuffers = name:"_createFramebuffer"; manual,
						glGenRenderbuffers = name:"_createRenderbuffer"; manual,
						glGenTextures = name:"_createTexture"; manual,

						glDeleteBuffers = name:"_deleteBuffer"; manual,
						glDeleteFramebuffers = name:"_deleteFramebuffer"; manual,
						glDeleteRenderbuffers = name:"_deleteRenderbuffer"; manual,
						glDeleteTextures = name:"_deleteTexture"; manual,

						glGetShaderiv = name:"_getShaderParameter"; manual,
						glGetProgramiv = name:"_getProgramParameter"; manual,

						glGetProgramInfoLog = manual,
						glGetShaderInfoLog = manual,
						glGetShaderSource = manual,
						glShaderSource = manual,
						glGetActiveAttrib = manual,
						glGetActiveUniform = manual,
						glGetAttachedShaders = manual,

						glGetTexParameterfv = name:"getTexParameter"; manual,
						glGetUniformfv = name:"_getUniform"; manual,

#
# Struct properties
# options:
#   opaque              The structure will be treated as 'opaque' and can't not be inspected from JS.
#                       Opaque structures are much faster to generate than 'manual' or 'automatic' structures
#   manual:[func]       Manual conversion is provided for this structures. jsval_to_structname() and structname_to_jsval shall exists in your project
#                       If "func" is passed, it will call that conversion function
struct_properties =

#
# constants properties
# options:
#   prefix_to_remove=   Prefix to be removed from the parsed constants
constant_properties =  prefix_to_remove = GL_,

#
# Object oriented C library ?
# If so, convert C-like API to object oriented API
# This will generate JavaScript code that will call the C API in a Object Oriented manner.
# The generated code might need to be manually modified
#
## OpenGL doesn't have an OO API.
objects_from_c_functions =

# BridgeSupport file
bridge_support_file = ./opengles20.bridgesupport

# File that contains information that complements BridgeSupport (not present on BridgeSupport file)
## None, since OpenGL has no classes
complement_file =
