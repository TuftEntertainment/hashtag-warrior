<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='cpArbiter' type='{cpArbiter=&quot;e&quot;f&quot;u&quot;f&quot;surface_vr&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a_private&quot;^{cpShape}&quot;b_private&quot;^{cpShape}&quot;body_a_private&quot;^{cpBody}&quot;body_b_private&quot;^{cpBody}&quot;thread_a_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;thread_b_private&quot;{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}&quot;numContacts_private&quot;i&quot;contacts_private&quot;^{cpContact}&quot;stamp_private&quot;I&quot;handler_private&quot;^{cpCollisionHandler}&quot;swappedColl_private&quot;i&quot;state_private&quot;i}'>
<field name='e' declared_type='cpFloat' type='f'/>
<field name='u' declared_type='cpFloat' type='f'/>
<field name='surface_vr' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='a_private' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field name='b_private' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field name='body_a_private' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='body_b_private' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='thread_a_private' declared_type='struct cpArbiterThread' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}'/>
<field name='thread_b_private' declared_type='struct cpArbiterThread' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}'/>
<field name='numContacts_private' declared_type='int' type='i'/>
<field name='contacts_private' declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<field name='stamp_private' declared_type='cpTimestamp' type='I'/>
<field name='handler_private' declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
<field name='swappedColl_private' declared_type='cpBool' type='i'/>
<field name='state_private' declared_type='cpArbiterState' type='i'/>
</struct>
<struct name='cpArbiterThread' type='{cpArbiterThread=&quot;next&quot;^{cpArbiter}&quot;prev&quot;^{cpArbiter}}'>
<field name='next' declared_type='struct cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<field name='prev' declared_type='struct cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</struct>
<struct name='cpArray' type='{cpArray=&quot;num&quot;i&quot;max&quot;i&quot;arr&quot;^^v}'>
<field name='num' declared_type='int' type='i'/>
<field name='max' declared_type='int' type='i'/>
<field name='arr' declared_type='void**' type='^^v'/>
</struct>
<struct name='cpBB' type='{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}'>
<field name='l' declared_type='cpFloat' type='f'/>
<field name='b' declared_type='cpFloat' type='f'/>
<field name='r' declared_type='cpFloat' type='f'/>
<field name='t' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpBody' type='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}'>
<field name='velocity_func' declared_type='cpBodyVelocityFunc' type='^?' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='position_func' declared_type='cpBodyPositionFunc' type='^?' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='m' declared_type='cpFloat' type='f'/>
<field name='m_inv' declared_type='cpFloat' type='f'/>
<field name='i' declared_type='cpFloat' type='f'/>
<field name='i_inv' declared_type='cpFloat' type='f'/>
<field name='p' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='v' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='f' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='a' declared_type='cpFloat' type='f'/>
<field name='w' declared_type='cpFloat' type='f'/>
<field name='t' declared_type='cpFloat' type='f'/>
<field name='rot' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='data' declared_type='cpDataPointer' type='^v'/>
<field name='v_limit' declared_type='cpFloat' type='f'/>
<field name='w_limit' declared_type='cpFloat' type='f'/>
<field name='v_bias_private' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='w_bias_private' declared_type='cpFloat' type='f'/>
<field name='space_private' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<field name='shapeList_private' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field name='arbiterList_private' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<field name='constraintList_private' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<field name='node_private' declared_type='cpComponentNode' type='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}'/>
</struct>
<struct name='cpCircleShape' type='{cpCircleShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;c&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r&quot;f}'>
<field name='shape' declared_type='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'/>
<field name='c' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='tc' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpCollisionHandler' type='{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}'>
<field name='a' declared_type='cpCollisionType' type='L'/>
<field name='b' declared_type='cpCollisionType' type='L'/>
<field name='begin' declared_type='cpCollisionBeginFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field name='preSolve' declared_type='cpCollisionPreSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field name='postSolve' declared_type='cpCollisionPostSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='separate' declared_type='cpCollisionSeparateFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='data' declared_type='void*' type='^v'/>
</struct>
<struct name='cpComponentNode' type='{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}'>
<field name='root' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='next' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='idleTime' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'>
<field name='klass_private' const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
<field name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='space_private' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<field name='next_a_private' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<field name='next_b_private' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<field name='maxForce' declared_type='cpFloat' type='f'/>
<field name='errorBias' declared_type='cpFloat' type='f'/>
<field name='maxBias' declared_type='cpFloat' type='f'/>
<field name='preSolve' declared_type='cpConstraintPreSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='postSolve' declared_type='cpConstraintPostSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='data' declared_type='cpDataPointer' type='^v'/>
</struct>
<struct name='cpConstraintClass' type='{cpConstraintClass=&quot;preStep&quot;^?&quot;applyCachedImpulse&quot;^?&quot;applyImpulse&quot;^?&quot;getImpulse&quot;^?}'>
<field name='preStep' declared_type='cpConstraintPreStepImpl' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='applyCachedImpulse' declared_type='cpConstraintApplyCachedImpulseImpl' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='applyImpulse' declared_type='cpConstraintApplyImpulseImpl' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='getImpulse' declared_type='cpConstraintGetImpulseImpl' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</field>
</struct>
<struct name='cpContact' type='{cpContact=&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;tMass&quot;f&quot;bounce&quot;f&quot;jnAcc&quot;f&quot;jtAcc&quot;f&quot;jBias&quot;f&quot;bias&quot;f&quot;hash&quot;I}'>
<field name='p' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='dist' declared_type='cpFloat' type='f'/>
<field name='r1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='nMass' declared_type='cpFloat' type='f'/>
<field name='tMass' declared_type='cpFloat' type='f'/>
<field name='bounce' declared_type='cpFloat' type='f'/>
<field name='jnAcc' declared_type='cpFloat' type='f'/>
<field name='jtAcc' declared_type='cpFloat' type='f'/>
<field name='jBias' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpFloat' type='f'/>
<field name='hash' declared_type='cpHashValue' type='L'/>
</struct>
<struct name='cpContactPointSet' type='{cpContactPointSet=&quot;count&quot;i&quot;points&quot;[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f}]}'>
<field name='count' declared_type='int' type='i'/>
<field name='points' declared_type='struct cpContactPointSet::*' type='[4{?=&quot;point&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;normal&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f}]'/>
</struct>
<struct name='cpDampedRotarySpring' type='{cpDampedRotarySpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;restAngle&quot;f&quot;stiffness&quot;f&quot;damping&quot;f&quot;springTorqueFunc&quot;^?&quot;target_wrn&quot;f&quot;w_coef&quot;f&quot;iSum&quot;f}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='restAngle' declared_type='cpFloat' type='f'/>
<field name='stiffness' declared_type='cpFloat' type='f'/>
<field name='damping' declared_type='cpFloat' type='f'/>
<field name='springTorqueFunc' declared_type='cpDampedRotarySpringTorqueFunc' type='^?' function_pointer='true'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</field>
<field name='target_wrn' declared_type='cpFloat' type='f'/>
<field name='w_coef' declared_type='cpFloat' type='f'/>
<field name='iSum' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpDampedSpring' type='{cpDampedSpring=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;restLength&quot;f&quot;stiffness&quot;f&quot;damping&quot;f&quot;springForceFunc&quot;^?&quot;target_vrn&quot;f&quot;v_coef&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='anchr1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='anchr2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='restLength' declared_type='cpFloat' type='f'/>
<field name='stiffness' declared_type='cpFloat' type='f'/>
<field name='damping' declared_type='cpFloat' type='f'/>
<field name='springForceFunc' declared_type='cpDampedSpringForceFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</field>
<field name='target_vrn' declared_type='cpFloat' type='f'/>
<field name='v_coef' declared_type='cpFloat' type='f'/>
<field name='r1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='nMass' declared_type='cpFloat' type='f'/>
<field name='n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpGearJoint' type='{cpGearJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;phase&quot;f&quot;ratio&quot;f&quot;ratio_inv&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='phase' declared_type='cpFloat' type='f'/>
<field name='ratio' declared_type='cpFloat' type='f'/>
<field name='ratio_inv' declared_type='cpFloat' type='f'/>
<field name='iSum' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpFloat' type='f'/>
<field name='jAcc' declared_type='cpFloat' type='f'/>
<field name='jMax' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpGrooveJoint' type='{cpGrooveJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;grv_n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_a&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_b&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;grv_tn&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;clamp&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jAcc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jMaxLen&quot;f&quot;bias&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='grv_n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='grv_a' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='grv_b' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='anchr2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='grv_tn' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='clamp' declared_type='cpFloat' type='f'/>
<field name='r1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='k1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='k2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='jAcc' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='jMaxLen' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpNearestPointQueryInfo' type='{cpNearestPointQueryInfo=&quot;shape&quot;^{cpShape}&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;d&quot;f}'>
<field name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field name='p' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='d' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpPinJoint' type='{cpPinJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;dist&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;jnAcc&quot;f&quot;jnMax&quot;f&quot;bias&quot;f}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='anchr1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='anchr2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='dist' declared_type='cpFloat' type='f'/>
<field name='r1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='nMass' declared_type='cpFloat' type='f'/>
<field name='jnAcc' declared_type='cpFloat' type='f'/>
<field name='jnMax' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpPivotJoint' type='{cpPivotJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;k2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jAcc&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;jMaxLen&quot;f&quot;bias&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='anchr1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='anchr2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='k1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='k2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='jAcc' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='jMaxLen' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpPolyShape' type='{cpPolyShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;numVerts&quot;i&quot;verts&quot;^{CGPoint}&quot;tVerts&quot;^{CGPoint}&quot;planes&quot;^{cpSplittingPlane}&quot;tPlanes&quot;^{cpSplittingPlane}}'>
<field name='shape' declared_type='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'/>
<field name='numVerts' declared_type='int' type='i'/>
<field name='verts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<field name='tVerts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<field name='planes' declared_type='cpSplittingPlane*' type='^{cpSplittingPlane={CGPoint=ff}f}'/>
<field name='tPlanes' declared_type='cpSplittingPlane*' type='^{cpSplittingPlane={CGPoint=ff}f}'/>
</struct>
<struct name='cpRatchetJoint' type='{cpRatchetJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;angle&quot;f&quot;phase&quot;f&quot;ratchet&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='angle' declared_type='cpFloat' type='f'/>
<field name='phase' declared_type='cpFloat' type='f'/>
<field name='ratchet' declared_type='cpFloat' type='f'/>
<field name='iSum' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpFloat' type='f'/>
<field name='jAcc' declared_type='cpFloat' type='f'/>
<field name='jMax' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpRotaryLimitJoint' type='{cpRotaryLimitJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;min&quot;f&quot;max&quot;f&quot;iSum&quot;f&quot;bias&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='min' declared_type='cpFloat' type='f'/>
<field name='max' declared_type='cpFloat' type='f'/>
<field name='iSum' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpFloat' type='f'/>
<field name='jAcc' declared_type='cpFloat' type='f'/>
<field name='jMax' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpSegmentQueryInfo' type='{cpSegmentQueryInfo=&quot;shape&quot;^{cpShape}&quot;t&quot;f&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field name='t' declared_type='cpFloat' type='f'/>
<field name='n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpSegmentShape' type='{cpSegmentShape=&quot;shape&quot;{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}&quot;a&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;b&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;ta&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tb&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;tn&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r&quot;f&quot;a_tangent&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;b_tangent&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}}'>
<field name='shape' declared_type='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'/>
<field name='a' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='b' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='ta' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='tb' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='tn' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r' declared_type='cpFloat' type='f'/>
<field name='a_tangent' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='b_tangent' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='cpShape' type='{cpShape=&quot;klass_private&quot;^{cpShapeClass}&quot;body&quot;^{cpBody}&quot;bb&quot;{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}&quot;sensor&quot;i&quot;e&quot;f&quot;u&quot;f&quot;surface_v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;collision_type&quot;I&quot;group&quot;I&quot;layers&quot;I&quot;space_private&quot;^{cpSpace}&quot;next_private&quot;^{cpShape}&quot;prev_private&quot;^{cpShape}&quot;hashid_private&quot;I}'>
<field name='klass_private' const='true' declared_type='cpShapeClass*' type='^{cpShapeClass=i^?^?^?^?}'/>
<field name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='bb' declared_type='cpBB' type='{cpBB=&quot;l&quot;f&quot;b&quot;f&quot;r&quot;f&quot;t&quot;f}'/>
<field name='sensor' declared_type='cpBool' type='i'/>
<field name='e' declared_type='cpFloat' type='f'/>
<field name='u' declared_type='cpFloat' type='f'/>
<field name='surface_v' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='data' declared_type='cpDataPointer' type='^v'/>
<field name='collision_type' declared_type='cpCollisionType' type='L'/>
<field name='group' declared_type='cpGroup' type='L'/>
<field name='layers' declared_type='cpLayers' type='I'/>
<field name='space_private' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<field name='next_private' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field name='prev_private' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<field name='hashid_private' declared_type='cpHashValue' type='L'/>
</struct>
<struct name='cpShapeClass' type='{cpShapeClass=&quot;type&quot;i&quot;cacheData&quot;^?&quot;destroy&quot;^?&quot;nearestPointQuery&quot;^?&quot;segmentQuery&quot;^?}'>
<field name='type' declared_type='cpShapeType' type='i'/>
<field name='cacheData' declared_type='cpShapeCacheDataImpl' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</field>
<field name='destroy' declared_type='cpShapeDestroyImpl' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='nearestPointQuery' declared_type='cpShapeNearestPointQueryImpl' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpNearestPointQueryInfo*' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='segmentQuery' declared_type='cpShapeSegmentQueryImpl' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='cpSimpleMotor' type='{cpSimpleMotor=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;rate&quot;f&quot;iSum&quot;f&quot;jAcc&quot;f&quot;jMax&quot;f}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='rate' declared_type='cpFloat' type='f'/>
<field name='iSum' declared_type='cpFloat' type='f'/>
<field name='jAcc' declared_type='cpFloat' type='f'/>
<field name='jMax' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpSlideJoint' type='{cpSlideJoint=&quot;constraint&quot;{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}&quot;anchr1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;anchr2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;min&quot;f&quot;max&quot;f&quot;r1&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;r2&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;nMass&quot;f&quot;jnAcc&quot;f&quot;jnMax&quot;f&quot;bias&quot;f}'>
<field name='constraint' declared_type='cpConstraint' type='{cpConstraint=&quot;klass_private&quot;^{cpConstraintClass}&quot;a&quot;^{cpBody}&quot;b&quot;^{cpBody}&quot;space_private&quot;^{cpSpace}&quot;next_a_private&quot;^{cpConstraint}&quot;next_b_private&quot;^{cpConstraint}&quot;maxForce&quot;f&quot;errorBias&quot;f&quot;maxBias&quot;f&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;data&quot;^v}'/>
<field name='anchr1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='anchr2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='min' declared_type='cpFloat' type='f'/>
<field name='max' declared_type='cpFloat' type='f'/>
<field name='r1' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='r2' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='nMass' declared_type='cpFloat' type='f'/>
<field name='jnAcc' declared_type='cpFloat' type='f'/>
<field name='jnMax' declared_type='cpFloat' type='f'/>
<field name='bias' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpSpace' type='{cpSpace=&quot;iterations&quot;i&quot;gravity&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;damping&quot;f&quot;idleSpeedThreshold&quot;f&quot;sleepTimeThreshold&quot;f&quot;collisionSlop&quot;f&quot;collisionBias&quot;f&quot;collisionPersistence&quot;I&quot;enableContactGraph&quot;i&quot;data&quot;^v&quot;staticBody&quot;^{cpBody}&quot;stamp_private&quot;I&quot;curr_dt_private&quot;f&quot;bodies_private&quot;^{cpArray}&quot;rousedBodies_private&quot;^{cpArray}&quot;sleepingComponents_private&quot;^{cpArray}&quot;staticShapes_private&quot;^{cpSpatialIndex}&quot;activeShapes_private&quot;^{cpSpatialIndex}&quot;arbiters_private&quot;^{cpArray}&quot;contactBuffersHead_private&quot;^{cpContactBufferHeader}&quot;cachedArbiters_private&quot;^{cpHashSet}&quot;pooledArbiters_private&quot;^{cpArray}&quot;constraints_private&quot;^{cpArray}&quot;allocatedBuffers_private&quot;^{cpArray}&quot;locked_private&quot;i&quot;collisionHandlers_private&quot;^{cpHashSet}&quot;defaultHandler_private&quot;{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}&quot;skipPostStep_private&quot;i&quot;postStepCallbacks_private&quot;^{cpArray}&quot;_staticBody_private&quot;{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}}'>
<field name='iterations' declared_type='int' type='i'/>
<field name='gravity' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='damping' declared_type='cpFloat' type='f'/>
<field name='idleSpeedThreshold' declared_type='cpFloat' type='f'/>
<field name='sleepTimeThreshold' declared_type='cpFloat' type='f'/>
<field name='collisionSlop' declared_type='cpFloat' type='f'/>
<field name='collisionBias' declared_type='cpFloat' type='f'/>
<field name='collisionPersistence' declared_type='cpTimestamp' type='I'/>
<field name='enableContactGraph' declared_type='cpBool' type='i'/>
<field name='data' declared_type='cpDataPointer' type='^v'/>
<field name='staticBody' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<field name='stamp_private' declared_type='cpTimestamp' type='I'/>
<field name='curr_dt_private' declared_type='cpFloat' type='f'/>
<field name='bodies_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='rousedBodies_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='sleepingComponents_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='staticShapes_private' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<field name='activeShapes_private' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<field name='arbiters_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='contactBuffersHead_private' declared_type='cpContactBufferHeader*' type='^{cpContactBufferHeader=}'/>
<field name='cachedArbiters_private' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<field name='pooledArbiters_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='constraints_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='allocatedBuffers_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='locked_private' declared_type='int' type='i'/>
<field name='collisionHandlers_private' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<field name='defaultHandler_private' declared_type='cpCollisionHandler' type='{cpCollisionHandler=&quot;a&quot;I&quot;b&quot;I&quot;begin&quot;^?&quot;preSolve&quot;^?&quot;postSolve&quot;^?&quot;separate&quot;^?&quot;data&quot;^v}'/>
<field name='skipPostStep_private' declared_type='cpBool' type='i'/>
<field name='postStepCallbacks_private' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<field name='_staticBody_private' declared_type='cpBody' type='{cpBody=&quot;velocity_func&quot;^?&quot;position_func&quot;^?&quot;m&quot;f&quot;m_inv&quot;f&quot;i&quot;f&quot;i_inv&quot;f&quot;p&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;v&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;f&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;a&quot;f&quot;w&quot;f&quot;t&quot;f&quot;rot&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;data&quot;^v&quot;v_limit&quot;f&quot;w_limit&quot;f&quot;v_bias_private&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;w_bias_private&quot;f&quot;space_private&quot;^{cpSpace}&quot;shapeList_private&quot;^{cpShape}&quot;arbiterList_private&quot;^{cpArbiter}&quot;constraintList_private&quot;^{cpConstraint}&quot;node_private&quot;{cpComponentNode=&quot;root&quot;^{cpBody}&quot;next&quot;^{cpBody}&quot;idleTime&quot;f}}'/>
</struct>
<struct name='cpSpatialIndex' type='{cpSpatialIndex=&quot;klass&quot;^{cpSpatialIndexClass}&quot;bbfunc&quot;^?&quot;staticIndex&quot;^{cpSpatialIndex}&quot;dynamicIndex&quot;^{cpSpatialIndex}}'>
<field name='klass' declared_type='cpSpatialIndexClass*' type='^{cpSpatialIndexClass=^?^?^?^?^?^?^?^?^?^?^?}'/>
<field name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</field>
<field name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<field name='dynamicIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</struct>
<struct name='cpSpatialIndexClass' type='{cpSpatialIndexClass=&quot;destroy&quot;^?&quot;count&quot;^?&quot;each&quot;^?&quot;contains&quot;^?&quot;insert&quot;^?&quot;remove&quot;^?&quot;reindex&quot;^?&quot;reindexObject&quot;^?&quot;reindexQuery&quot;^?&quot;query&quot;^?&quot;segmentQuery&quot;^?}'>
<field name='destroy' declared_type='cpSpatialIndexDestroyImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='count' declared_type='cpSpatialIndexCountImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='int' type='i'/>
</field>
<field name='each' declared_type='cpSpatialIndexEachImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexIteratorFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='contains' declared_type='cpSpatialIndexContainsImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='cpBool' type='i'/>
</field>
<field name='insert' declared_type='cpSpatialIndexInsertImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field name='remove' declared_type='cpSpatialIndexRemoveImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field name='reindex' declared_type='cpSpatialIndexReindexImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='reindexObject' declared_type='cpSpatialIndexReindexObjectImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field name='reindexQuery' declared_type='cpSpatialIndexReindexQueryImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='query' declared_type='cpSpatialIndexQueryImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpBB' type='{cpBB=ffff}'/>
<arg declared_type='cpSpatialIndexQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='segmentQuery' declared_type='cpSpatialIndexSegmentQueryImpl' type='^?' function_pointer='true'>
<arg declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpSpatialIndexSegmentQueryFunc' type='^?'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='cpSplittingPlane' type='{cpSplittingPlane=&quot;n&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;d&quot;f}'>
<field name='n' declared_type='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field name='d' declared_type='cpFloat' type='f'/>
</struct>
<struct name='cpVect' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'>
<field name='x' declared_type='CGFloat' type='f'/>
<field name='y' declared_type='CGFloat' type='f'/>
</struct>
<opaque name='cpBBTree' type='^{cpBBTree=}'/>
<opaque name='cpContactBufferHeader' type='^{cpContactBufferHeader=}'/>
<opaque name='cpHashSet' type='^{cpHashSet=}'/>
<opaque name='cpSpaceHash' type='^{cpSpaceHash=}'/>
<opaque name='cpSweep1D' type='^{cpSweep1D=}'/>
<constant name='cpDefaultCollisionHandler' declared_type='cpCollisionHandler' type='{cpCollisionHandler=II^?^?^?^?^v}'/>
<constant name='cpVersionString' const='true' declared_type='char*' type='*'/>
<constant name='cpvzero' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<enum name='CP_ALLOW_PRIVATE_ACCESS' value='1'/>
<enum name='CP_ALL_LAYERS' value='4294967295'/>
<enum name='CP_BUFFER_BYTES' value='32768'/>
<enum name='CP_CIRCLE_SHAPE' value='0'/>
<enum name='CP_HASH_COEF' value='3344921057'/>
<enum name='CP_MAX_CONTACTS_PER_ARBITER' value='4'/>
<enum name='CP_NO_GROUP' value='0'/>
<enum name='CP_NUM_SHAPES' value='3'/>
<enum name='CP_POLY_SHAPE' value='2'/>
<enum name='CP_SEGMENT_SHAPE' value='1'/>
<enum name='CP_USE_CGPOINTS' value='1'/>
<enum name='CP_USE_DOUBLES' value='0'/>
<enum name='CP_VERSION_MAJOR' value='6'/>
<enum name='CP_VERSION_MINOR' value='1'/>
<enum name='CP_VERSION_RELEASE' value='1'/>
<enum name='cpArbiterStateCached' value='3'/>
<enum name='cpArbiterStateFirstColl' value='0'/>
<enum name='cpArbiterStateIgnore' value='2'/>
<enum name='cpArbiterStateNormal' value='1'/>
<enum name='cpFalse' value='0'/>
<enum name='cpTrue' value='1'/>
<function name='apply_bias_impulse' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='j' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='apply_bias_impulses' inline='true'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='r1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='j' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='apply_impulse' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='j' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='apply_impulses' inline='true'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='r1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='j' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='bias_coef' inline='true'>
<arg name='errorBias' declared_type='cpFloat' type='f'/>
<arg name='dt' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterApplyCachedImpulse'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='dt_coef' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterApplyImpulse'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterCallSeparate' inline='true'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetBodies' inline='true'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='a' declared_type='cpBody**' type='^^{cpBody}'/>
<arg name='b' declared_type='cpBody**' type='^^{cpBody}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetContactPointSet'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpContactPointSet' type='{cpContactPointSet=i[4{?={CGPoint=ff}{CGPoint=ff}f}]}'/>
</function>
<function name='cpArbiterGetCount'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpArbiterGetDepth'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='i' declared_type='int' type='i'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterGetElasticity' inline='true'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterGetFriction' inline='true'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterGetNormal'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='i' declared_type='int' type='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterGetPoint'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='i' declared_type='int' type='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterGetShapes' inline='true'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='a' declared_type='cpShape**' type='^^{cpShape}'/>
<arg name='b' declared_type='cpShape**' type='^^{cpShape}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterGetSurfaceVelocity' inline='true'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterIgnore'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterInit'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='a' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='b' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</function>
<function name='cpArbiterIsFirstContact'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpArbiterNext' inline='true'>
<arg name='node' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
</function>
<function name='cpArbiterPreStep'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='dt' declared_type='cpFloat' type='f'/>
<arg name='bias' declared_type='cpFloat' type='f'/>
<arg name='slop' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetElasticity' inline='true'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetFriction' inline='true'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterSetSurfaceVelocity' inline='true'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterThreadForBody' inline='true'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='struct cpArbiterThread*' type='^{cpArbiterThread=^{cpArbiter}^{cpArbiter}}'/>
</function>
<function name='cpArbiterTotalImpulse'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterTotalImpulseWithFriction'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpArbiterTotalKE'>
<arg name='arb' const='true' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArbiterUnthread'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArbiterUpdate'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='contacts' declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<arg name='numContacts' declared_type='int' type='i'/>
<arg name='handler' declared_type='struct cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
<arg name='a' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='b' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpAreaForCircle'>
<arg name='r1' declared_type='cpFloat' type='f'/>
<arg name='r2' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpAreaForPoly'>
<arg name='numVerts' const='true' declared_type='int' type='i'/>
<arg name='verts' const='true' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpAreaForSegment'>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpArrayContains'>
<arg name='arr' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<arg name='ptr' declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpArrayDeleteObj'>
<arg name='arr' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<arg name='obj' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFree'>
<arg name='arr' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayFreeEach'>
<arg name='arr' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<arg name='freeFunc' declared_type='void (*)(void *)' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpArrayNew'>
<arg name='size' declared_type='int' type='i'/>
<retval declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
</function>
<function name='cpArrayPop'>
<arg name='arr' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpArrayPush'>
<arg name='arr' declared_type='cpArray*' type='^{cpArray=ii^^v}'/>
<arg name='object' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBArea' inline='true'>
<arg name='bb' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBBClampVect'>
<arg name='bb' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBBContainsBB' inline='true'>
<arg name='bb' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='other' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBContainsVect' inline='true'>
<arg name='bb' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBExpand' inline='true'>
<arg name='bb' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpBBIntersects' inline='true'>
<arg name='a' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='b' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBIntersectsSegment' inline='true'>
<arg name='bb' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBBMerge' inline='true'>
<arg name='a' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='b' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpBBMergedArea' inline='true'>
<arg name='a' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='b' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBBNew' inline='true'>
<arg name='l' const='true' declared_type='cpFloat' type='f'/>
<arg name='b' const='true' declared_type='cpFloat' type='f'/>
<arg name='r' const='true' declared_type='cpFloat' type='f'/>
<arg name='t' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpBBNewForCircle' inline='true'>
<arg name='p' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpBBSegmentQuery' inline='true'>
<arg name='bb' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBBTreeAlloc'>
<retval declared_type='cpBBTree*' type='^{cpBBTree=}'/>
</function>
<function name='cpBBTreeInit'>
<arg name='tree' declared_type='cpBBTree*' type='^{cpBBTree=}'/>
<arg name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeNew'>
<arg name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpBBTreeOptimize'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBTreeSetVelocityFunc'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='func' declared_type='cpBBTreeVelocityFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBBWrapVect'>
<arg name='bb' const='true' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyActivate'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyActivateStatic'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='filter' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAddShape'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyAlloc'>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyApplyForce'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='f' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyApplyImpulse'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='j' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyDestroy'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachArbiter'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='func' declared_type='cpBodyArbiterIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachConstraint'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='func' declared_type='cpBodyConstraintIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyEachShape'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='func' declared_type='cpBodyShapeIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyFree'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyGetAngVel' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetAngVelLimit' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetAngle' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetForce' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyGetMass' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetMoment' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetPos' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyGetRot' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyGetSpace' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpBodyGetTorque' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyGetUserData' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpBodyGetVel' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyGetVelAtLocalPoint'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='point' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyGetVelAtWorldPoint'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='point' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyGetVelLimit' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyInit'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='m' declared_type='cpFloat' type='f'/>
<arg name='i' declared_type='cpFloat' type='f'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyInitStatic'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyIsRogue' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBodyIsSleeping' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBodyIsStatic' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpBodyKineticEnergy' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpBodyLocal2World' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBodyNew'>
<arg name='m' declared_type='cpFloat' type='f'/>
<arg name='i' declared_type='cpFloat' type='f'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyNewStatic'>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpBodyRemoveConstraint'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyRemoveShape'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyResetForces'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngVel' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='value' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngVelLimit' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='value' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetAngle'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='a' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetForce' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='value' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMass'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='m' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetMoment'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='i' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetPos'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='pos' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetTorque' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='value' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetUserData' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='value' const='true' declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVel' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='value' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySetVelLimit' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='value' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleep'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodySleepWithGroup'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='group' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdatePosition'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='dt' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyUpdateVelocity'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='gravity' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='damping' declared_type='cpFloat' type='f'/>
<arg name='dt' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpBodyWorld2Local' inline='true'>
<arg name='body' const='true' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpBoxShapeInit'>
<arg name='poly' declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='width' declared_type='cpFloat' type='f'/>
<arg name='height' declared_type='cpFloat' type='f'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpBoxShapeInit2'>
<arg name='poly' declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='box' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpBoxShapeNew'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='width' declared_type='cpFloat' type='f'/>
<arg name='height' declared_type='cpFloat' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpBoxShapeNew2'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='box' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpCentroidForPoly'>
<arg name='numVerts' const='true' declared_type='int' type='i'/>
<arg name='verts' const='true' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpCircleShapeAlloc'>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}'/>
</function>
<function name='cpCircleShapeGetOffset'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpCircleShapeGetRadius'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpCircleShapeInit'>
<arg name='circle' declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='radius' declared_type='cpFloat' type='f'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpCircleShape*' type='^{cpCircleShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}f}'/>
</function>
<function name='cpCircleShapeNew'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='radius' declared_type='cpFloat' type='f'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpCircleShapeSetOffset'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpCircleShapeSetRadius'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='radius' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpClosetPointOnSegment' inline='true'>
<arg name='p' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='a' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpCollideShapes'>
<arg name='a' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='b' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='arr' declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpConstraintActivateBodies' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintDestroy'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintFree'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintGetA' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpConstraintGetB' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpConstraintGetErrorBias' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetImpulse' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetMaxBias' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetMaxForce' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpConstraintGetPostSolveFunc' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpConstraintPostSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetPreSolveFunc' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpConstraintPreSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='cpConstraintGetSpace' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpConstraintGetUserData' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpConstraintInit'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='klass' const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintNext' inline='true'>
<arg name='node' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpConstraintSetErrorBias' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxBias' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetMaxForce' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPostSolveFunc' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpConstraintPostSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetPreSolveFunc' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpConstraintPreSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpConstraintSetUserData' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpContactBufferGetArray'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
</function>
<function name='cpContactInit'>
<arg name='con' declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
<arg name='p' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='n' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='dist' declared_type='cpFloat' type='f'/>
<arg name='hash' declared_type='cpHashValue' type='L'/>
<retval declared_type='cpContact*' type='^{cpContact={CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}fffffffI}'/>
</function>
<function name='cpConvexHull'>
<arg name='count' declared_type='int' type='i'/>
<arg name='verts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='result' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='first' declared_type='int*' type='^i'/>
<arg name='tol' declared_type='cpFloat' type='f'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpDampedRotarySpringAlloc'>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}'/>
</function>
<function name='cpDampedRotarySpringGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpDampedRotarySpringGetDamping' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedRotarySpringGetRestAngle' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedRotarySpringGetSpringTorqueFunc' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpDampedRotarySpringTorqueFunc' type='^?' function_pointer='true'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</retval>
</function>
<function name='cpDampedRotarySpringGetStiffness' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedRotarySpringInit'>
<arg name='joint' declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='restAngle' declared_type='cpFloat' type='f'/>
<arg name='stiffness' declared_type='cpFloat' type='f'/>
<arg name='damping' declared_type='cpFloat' type='f'/>
<retval declared_type='cpDampedRotarySpring*' type='^{cpDampedRotarySpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fff^?fff}'/>
</function>
<function name='cpDampedRotarySpringNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='restAngle' declared_type='cpFloat' type='f'/>
<arg name='stiffness' declared_type='cpFloat' type='f'/>
<arg name='damping' declared_type='cpFloat' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpDampedRotarySpringSetDamping' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetRestAngle' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetSpringTorqueFunc' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpDampedRotarySpringTorqueFunc' type='^?' function_pointer='true'>
<arg declared_type='struct cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedRotarySpringSetStiffness' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringAlloc'>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpDampedSpringGetAnchr1' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpDampedSpringGetAnchr2' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpDampedSpringGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpDampedSpringGetDamping' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedSpringGetRestLength' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedSpringGetSpringForceFunc' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpDampedSpringForceFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</retval>
</function>
<function name='cpDampedSpringGetStiffness' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpDampedSpringInit'>
<arg name='joint' declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='restLength' declared_type='cpFloat' type='f'/>
<arg name='stiffness' declared_type='cpFloat' type='f'/>
<arg name='damping' declared_type='cpFloat' type='f'/>
<retval declared_type='cpDampedSpring*' type='^{cpDampedSpring={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}fff^?ff{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpDampedSpringNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='restLength' declared_type='cpFloat' type='f'/>
<arg name='stiffness' declared_type='cpFloat' type='f'/>
<arg name='damping' declared_type='cpFloat' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpDampedSpringSetAnchr1' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetAnchr2' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetDamping' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetRestLength' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetSpringForceFunc' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpDampedSpringForceFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='cpDampedSpringSetStiffness' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointAlloc'>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpGearJointGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpGearJointGetPhase' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpGearJointGetRatio' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpGearJointInit'>
<arg name='joint' declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='phase' declared_type='cpFloat' type='f'/>
<arg name='ratio' declared_type='cpFloat' type='f'/>
<retval declared_type='cpGearJoint*' type='^{cpGearJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpGearJointNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='phase' declared_type='cpFloat' type='f'/>
<arg name='ratio' declared_type='cpFloat' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpGearJointSetPhase' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGearJointSetRatio'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointAlloc'>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpGrooveJointGetAnchr2' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpGrooveJointGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpGrooveJointGetGrooveA' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpGrooveJointGetGrooveB' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpGrooveJointInit'>
<arg name='joint' declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='groove_a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='groove_b' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpGrooveJoint*' type='^{cpGrooveJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpGrooveJointNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='groove_a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='groove_b' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpGrooveJointSetAnchr2' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveA'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpGrooveJointSetGrooveB'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetCount'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpHashSetEach'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<arg name='func' declared_type='cpHashSetIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFilter'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<arg name='func' declared_type='cpHashSetFilterFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetFind'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<arg name='hash' declared_type='cpHashValue' type='L'/>
<arg name='ptr' declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetFree'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpHashSetInsert'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<arg name='hash' declared_type='cpHashValue' type='L'/>
<arg name='ptr' declared_type='void*' type='^v'/>
<arg name='data' declared_type='void*' type='^v'/>
<arg name='trans' declared_type='cpHashSetTransFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</arg>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetNew'>
<arg name='size' declared_type='int' type='i'/>
<arg name='eqlFunc' declared_type='cpHashSetEqlFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<retval declared_type='cpHashSet*' type='^{cpHashSet=}'/>
</function>
<function name='cpHashSetRemove'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<arg name='hash' declared_type='cpHashValue' type='L'/>
<arg name='ptr' declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpHashSetSetDefaultValue'>
<arg name='set' declared_type='cpHashSet*' type='^{cpHashSet=}'/>
<arg name='default_value' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpInitChipmunk'>
<retval declared_type='void' type='v'/>
</function>
<function name='cpLoopIndexes'>
<arg name='verts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='count' declared_type='int' type='i'/>
<arg name='start' declared_type='int*' type='^i'/>
<arg name='end' declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMessage' variadic='true'>
<arg name='condition' const='true' declared_type='char*' type='*'/>
<arg name='file' const='true' declared_type='char*' type='*'/>
<arg name='line' declared_type='int' type='i'/>
<arg name='isError' declared_type='int' type='i'/>
<arg name='isHardError' declared_type='int' type='i'/>
<arg name='message' const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpMomentForBox'>
<arg name='m' declared_type='cpFloat' type='f'/>
<arg name='width' declared_type='cpFloat' type='f'/>
<arg name='height' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForBox2'>
<arg name='m' declared_type='cpFloat' type='f'/>
<arg name='box' declared_type='cpBB' type='{cpBB=ffff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForCircle'>
<arg name='m' declared_type='cpFloat' type='f'/>
<arg name='r1' declared_type='cpFloat' type='f'/>
<arg name='r2' declared_type='cpFloat' type='f'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForPoly'>
<arg name='m' declared_type='cpFloat' type='f'/>
<arg name='numVerts' declared_type='int' type='i'/>
<arg name='verts' const='true' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpMomentForSegment'>
<arg name='m' declared_type='cpFloat' type='f'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPinJointAlloc'>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpPinJointGetAnchr1' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpPinJointGetAnchr2' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpPinJointGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpPinJointGetDist' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPinJointInit'>
<arg name='joint' declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpPinJoint*' type='^{cpPinJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpPinJointNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpPinJointSetAnchr1' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetAnchr2' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPinJointSetDist' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointAlloc'>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpPivotJointGetAnchr1' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpPivotJointGetAnchr2' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpPivotJointGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpPivotJointInit'>
<arg name='joint' declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpPivotJoint*' type='^{cpPivotJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}}'/>
</function>
<function name='cpPivotJointNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='pivot' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpPivotJointNew2'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpPivotJointSetAnchr1' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPivotJointSetAnchr2' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeAlloc'>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpPolyShapeContainsVert' inline='true'>
<arg name='poly' const='true' declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpPolyShapeContainsVertPartial' inline='true'>
<arg name='poly' const='true' declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='n' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpPolyShapeGetNumVerts'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpPolyShapeGetVert'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='idx' declared_type='int' type='i'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpPolyShapeInit'>
<arg name='poly' declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='numVerts' declared_type='int' type='i'/>
<arg name='verts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
</function>
<function name='cpPolyShapeNew'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='numVerts' declared_type='int' type='i'/>
<arg name='verts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpPolyShapeSetVerts'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='numVerts' declared_type='int' type='i'/>
<arg name='verts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='offset' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpPolyShapeValueOnAxis' inline='true'>
<arg name='poly' const='true' declared_type='cpPolyShape*' type='^{cpPolyShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}i^{CGPoint}^{CGPoint}^{cpSplittingPlane}^{cpSplittingPlane}}'/>
<arg name='n' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='d' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpPolyValidate'>
<arg name='verts' const='true' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='numVerts' const='true' declared_type='int' type='i'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpRatchetJointAlloc'>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpRatchetJointGetAngle' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRatchetJointGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpRatchetJointGetPhase' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRatchetJointGetRatchet' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRatchetJointInit'>
<arg name='joint' declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='phase' declared_type='cpFloat' type='f'/>
<arg name='ratchet' declared_type='cpFloat' type='f'/>
<retval declared_type='cpRatchetJoint*' type='^{cpRatchetJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}fffffff}'/>
</function>
<function name='cpRatchetJointNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='phase' declared_type='cpFloat' type='f'/>
<arg name='ratchet' declared_type='cpFloat' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpRatchetJointSetAngle' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetPhase' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRatchetJointSetRatchet' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRecenterPoly'>
<arg name='numVerts' const='true' declared_type='int' type='i'/>
<arg name='verts' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpResetShapeIdCounter'>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointAlloc'>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}'/>
</function>
<function name='cpRotaryLimitJointGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpRotaryLimitJointGetMax' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRotaryLimitJointGetMin' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpRotaryLimitJointInit'>
<arg name='joint' declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='min' declared_type='cpFloat' type='f'/>
<arg name='max' declared_type='cpFloat' type='f'/>
<retval declared_type='cpRotaryLimitJoint*' type='^{cpRotaryLimitJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffffff}'/>
</function>
<function name='cpRotaryLimitJointNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='min' declared_type='cpFloat' type='f'/>
<arg name='max' declared_type='cpFloat' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpRotaryLimitJointSetMax' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpRotaryLimitJointSetMin' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentQueryHitDist' inline='true'>
<arg name='start' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='end' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='info' const='true' declared_type='cpSegmentQueryInfo' type='{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSegmentQueryHitPoint' inline='true'>
<arg name='start' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='end' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='info' const='true' declared_type='cpSegmentQueryInfo' type='{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSegmentShapeAlloc'>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}'/>
</function>
<function name='cpSegmentShapeGetA'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSegmentShapeGetB'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSegmentShapeGetNormal'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSegmentShapeGetRadius'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSegmentShapeInit'>
<arg name='seg' declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='radius' declared_type='cpFloat' type='f'/>
<retval declared_type='cpSegmentShape*' type='^{cpSegmentShape={cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}f{CGPoint=ff}{CGPoint=ff}}'/>
</function>
<function name='cpSegmentShapeNew'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='radius' declared_type='cpFloat' type='f'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSegmentShapeSetEndpoints'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetNeighbors'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='prev' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='next' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSegmentShapeSetRadius'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='radius' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeActive' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeCacheBB'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapeDestroy'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeFree'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeGetBB' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapeGetBody' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpShapeGetCollisionType' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpCollisionType' type='L'/>
</function>
<function name='cpShapeGetElasticity' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetFriction' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapeGetGroup' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpGroup' type='L'/>
</function>
<function name='cpShapeGetLayers' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpLayers' type='I'/>
</function>
<function name='cpShapeGetSensor' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeGetSpace' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpShapeGetSurfaceVelocity' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpShapeGetUserData' inline='true'>
<arg name='shape' const='true' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpShapeInit'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='klass' const='true' declared_type='cpShapeClass*' type='^{cpShapeClass=i^?^?^?^?}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpShapeNearestPointQuery'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='p' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='out' declared_type='cpNearestPointQueryInfo*' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpShapePointQuery'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='p' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeSegmentQuery'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='info' declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpShapeSetBody'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetCollisionType' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpCollisionType' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetElasticity' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetFriction' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetGroup' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpGroup' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetLayers' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpLayers' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSensor' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpBool' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetSurfaceVelocity' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeSetUserData' inline='true'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='value' declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpShapeUpdate'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='pos' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='rot' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</function>
<function name='cpShapeUpdateFunc'>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='unused' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSimpleMotorAlloc'>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}'/>
</function>
<function name='cpSimpleMotorGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpSimpleMotorGetRate' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSimpleMotorInit'>
<arg name='joint' declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='rate' declared_type='cpFloat' type='f'/>
<retval declared_type='cpSimpleMotor*' type='^{cpSimpleMotor={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}ffff}'/>
</function>
<function name='cpSimpleMotorNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='rate' declared_type='cpFloat' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpSimpleMotorSetRate' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointAlloc'>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpSlideJointGetAnchr1' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSlideJointGetAnchr2' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSlideJointGetClass'>
<retval const='true' declared_type='cpConstraintClass*' type='^{cpConstraintClass=^?^?^?^?}'/>
</function>
<function name='cpSlideJointGetMax' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSlideJointGetMin' inline='true'>
<arg name='constraint' const='true' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSlideJointInit'>
<arg name='joint' declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='min' declared_type='cpFloat' type='f'/>
<arg name='max' declared_type='cpFloat' type='f'/>
<retval declared_type='cpSlideJoint*' type='^{cpSlideJoint={cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}{CGPoint=ff}{CGPoint=ff}ff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}ffff}'/>
</function>
<function name='cpSlideJointNew'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='anchr1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='anchr2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='min' declared_type='cpFloat' type='f'/>
<arg name='max' declared_type='cpFloat' type='f'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpSlideJointSetAnchr1' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetAnchr2' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMax' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSlideJointSetMin' inline='true'>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceActivateBody'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceActivateShapesTouchingShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddBody'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpSpaceAddCollisionHandler'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='a' declared_type='cpCollisionType' type='L'/>
<arg name='b' declared_type='cpCollisionType' type='L'/>
<arg name='begin' declared_type='cpCollisionBeginFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg name='preSolve' declared_type='cpCollisionPreSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg name='postSolve' declared_type='cpCollisionPostSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='separate' declared_type='cpCollisionSeparateFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddConstraint'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
</function>
<function name='cpSpaceAddPostStepCallback'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='func' declared_type='cpPostStepFunc' type='^?' function_pointer='true'>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='key' declared_type='void*' type='^v'/>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceAddShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceAddStaticShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceAlloc'>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpSpaceArbiterSetFilter'>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceBBQuery'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='bb' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='layers' declared_type='cpLayers' type='I'/>
<arg name='group' declared_type='cpGroup' type='L'/>
<arg name='func' declared_type='cpSpaceBBQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceCollideShapes'>
<arg name='a' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='b' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceContainsBody'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceContainsConstraint'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceContainsShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceDestroy'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachBody'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='func' declared_type='cpSpaceBodyIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachConstraint'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='func' declared_type='cpSpaceConstraintIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceEachShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='func' declared_type='cpSpaceShapeIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFilterArbiters'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='filter' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceFree'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceGetCollisionBias' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetCollisionPersistence' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpTimestamp' type='I'/>
</function>
<function name='cpSpaceGetCollisionSlop' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetCurrentTimeStep' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetDamping' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetEnableContactGraph' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceGetGravity' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpSpaceGetIdleSpeedThreshold' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetIterations' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpaceGetPostStepData'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='key' declared_type='void*' type='^v'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='cpSpaceGetSleepTimeThreshold' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSpaceGetStaticBody' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
</function>
<function name='cpSpaceGetUserData' inline='true'>
<arg name='space' const='true' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpDataPointer' type='^v'/>
</function>
<function name='cpSpaceHashAlloc'>
<retval declared_type='cpSpaceHash*' type='^{cpSpaceHash=}'/>
</function>
<function name='cpSpaceHashInit'>
<arg name='hash' declared_type='cpSpaceHash*' type='^{cpSpaceHash=}'/>
<arg name='celldim' declared_type='cpFloat' type='f'/>
<arg name='numcells' declared_type='int' type='i'/>
<arg name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashNew'>
<arg name='celldim' declared_type='cpFloat' type='f'/>
<arg name='cells' declared_type='int' type='i'/>
<arg name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpaceHashResize'>
<arg name='hash' declared_type='cpSpaceHash*' type='^{cpSpaceHash=}'/>
<arg name='celldim' declared_type='cpFloat' type='f'/>
<arg name='numcells' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceInit'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpSpaceIsLocked' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceLock'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceLookupHandler' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='a' declared_type='cpCollisionType' type='L'/>
<arg name='b' declared_type='cpCollisionType' type='L'/>
<retval declared_type='cpCollisionHandler*' type='^{cpCollisionHandler=II^?^?^?^?^v}'/>
</function>
<function name='cpSpaceNearestPointQuery'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='point' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='maxDistance' declared_type='cpFloat' type='f'/>
<arg name='layers' declared_type='cpLayers' type='I'/>
<arg name='group' declared_type='cpGroup' type='L'/>
<arg name='func' declared_type='cpSpaceNearestPointQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceNearestPointQueryNearest'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='point' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='maxDistance' declared_type='cpFloat' type='f'/>
<arg name='layers' declared_type='cpLayers' type='I'/>
<arg name='group' declared_type='cpGroup' type='L'/>
<arg name='out' declared_type='cpNearestPointQueryInfo*' type='^{cpNearestPointQueryInfo=^{cpShape}{CGPoint=ff}f}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceNew'>
<retval declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
</function>
<function name='cpSpacePointQuery'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='point' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='layers' declared_type='cpLayers' type='I'/>
<arg name='group' declared_type='cpGroup' type='L'/>
<arg name='func' declared_type='cpSpacePointQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePointQueryFirst'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='point' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='layers' declared_type='cpLayers' type='I'/>
<arg name='group' declared_type='cpGroup' type='L'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceProcessComponents'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='dt' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushContacts'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='count' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpacePushFreshContactBuffer'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexShapesForBody'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceReindexStatic'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveBody'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveCollisionHandler'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='a' declared_type='cpCollisionType' type='L'/>
<arg name='b' declared_type='cpCollisionType' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveConstraint'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='constraint' declared_type='cpConstraint*' type='^{cpConstraint=^{cpConstraintClass}^{cpBody}^{cpBody}^{cpSpace}^{cpConstraint}^{cpConstraint}fff^?^?^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceRemoveStaticShape'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQuery'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='start' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='end' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='layers' declared_type='cpLayers' type='I'/>
<arg name='group' declared_type='cpGroup' type='L'/>
<arg name='func' declared_type='cpSpaceSegmentQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpFloat' type='f'/>
<arg declared_type='cpVect' type='{CGPoint=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSegmentQueryFirst'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='start' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='end' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='layers' declared_type='cpLayers' type='I'/>
<arg name='group' declared_type='cpGroup' type='L'/>
<arg name='out' declared_type='cpSegmentQueryInfo*' type='^{cpSegmentQueryInfo=^{cpShape}f{CGPoint=ff}}'/>
<retval declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
</function>
<function name='cpSpaceSetCollisionBias' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionPersistence' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpTimestamp' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetCollisionSlop' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetDamping' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetDefaultCollisionHandler'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='begin' declared_type='cpCollisionBeginFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg name='preSolve' declared_type='cpCollisionPreSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</arg>
<arg name='postSolve' declared_type='cpCollisionPostSolveFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='separate' declared_type='cpCollisionSeparateFunc' type='^?' function_pointer='true'>
<arg declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<arg declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetEnableContactGraph' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpBool' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetGravity' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIdleSpeedThreshold' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetIterations' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetSleepTimeThreshold' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceSetUserData' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='value' declared_type='cpDataPointer' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceShapeQuery'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='shape' declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg name='func' declared_type='cpSpaceShapeQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='cpShape*' type='^{cpShape=^{cpShapeClass}^{cpBody}{cpBB=ffff}iff{CGPoint=ff}^vIII^{cpSpace}^{cpShape}^{cpShape}I}'/>
<arg declared_type='cpContactPointSet*' type='^{cpContactPointSet=i[4{?={CGPoint=ff}{CGPoint=ff}f}]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpaceStep'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='dt' declared_type='cpFloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUncacheArbiter' inline='true'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='arb' declared_type='cpArbiter*' type='^{cpArbiter=ff{CGPoint=ff}^{cpShape}^{cpShape}^{cpBody}^{cpBody}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}{cpArbiterThread=^{cpArbiter}^{cpArbiter}}i^{cpContact}I^{cpCollisionHandler}ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUnlock'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='runPostStep' declared_type='cpBool' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpaceUseSpatialHash'>
<arg name='space' declared_type='cpSpace*' type='^{cpSpace=i{CGPoint=ff}fffffIi^v^{cpBody}If^{cpArray}^{cpArray}^{cpArray}^{cpSpatialIndex}^{cpSpatialIndex}^{cpArray}^{cpContactBufferHeader}^{cpHashSet}^{cpArray}^{cpArray}^{cpArray}i^{cpHashSet}{cpCollisionHandler=II^?^?^?^?^v}i^{cpArray}{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}}'/>
<arg name='dim' declared_type='cpFloat' type='f'/>
<arg name='count' declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexCollideStatic'>
<arg name='dynamicIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='func' declared_type='cpSpatialIndexQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexContains' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='obj' declared_type='void*' type='^v'/>
<arg name='hashid' declared_type='cpHashValue' type='L'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpSpatialIndexCount' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='cpSpatialIndexDestroy' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexEach' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='func' declared_type='cpSpatialIndexIteratorFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexFree'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexInit'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='klass' declared_type='cpSpatialIndexClass*' type='^{cpSpatialIndexClass=^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSpatialIndexInsert' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='obj' declared_type='void*' type='^v'/>
<arg name='hashid' declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexQuery' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='obj' declared_type='void*' type='^v'/>
<arg name='bb' declared_type='cpBB' type='{cpBB=ffff}'/>
<arg name='func' declared_type='cpSpatialIndexQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexReindex' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexReindexObject' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='obj' declared_type='void*' type='^v'/>
<arg name='hashid' declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexReindexQuery' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='func' declared_type='cpSpatialIndexQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexRemove' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='obj' declared_type='void*' type='^v'/>
<arg name='hashid' declared_type='cpHashValue' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSpatialIndexSegmentQuery' inline='true'>
<arg name='index' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<arg name='obj' declared_type='void*' type='^v'/>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='t_exit' declared_type='cpFloat' type='f'/>
<arg name='func' declared_type='cpSpatialIndexSegmentQueryFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpFloat' type='f'/>
</arg>
<arg name='data' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='cpSplittingPlaneCompare' inline='true'>
<arg name='plane' declared_type='cpSplittingPlane' type='{cpSplittingPlane={CGPoint=ff}f}'/>
<arg name='v' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpSplittingPlaneNew' inline='true'>
<arg name='a' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='b' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpSplittingPlane' type='{cpSplittingPlane={CGPoint=ff}f}'/>
</function>
<function name='cpSweep1DAlloc'>
<retval declared_type='cpSweep1D*' type='^{cpSweep1D=}'/>
</function>
<function name='cpSweep1DInit'>
<arg name='sweep' declared_type='cpSweep1D*' type='^{cpSweep1D=}'/>
<arg name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpSweep1DNew'>
<arg name='bbfunc' declared_type='cpSpatialIndexBBFunc' type='^?' function_pointer='true'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='cpBB' type='{cpBB=ffff}'/>
</arg>
<arg name='staticIndex' declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
<retval declared_type='cpSpatialIndex*' type='^{cpSpatialIndex=^{cpSpatialIndexClass}^?^{cpSpatialIndex}^{cpSpatialIndex}}'/>
</function>
<function name='cpfabs' inline='true'>
<arg name='f' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpfclamp' inline='true'>
<arg name='f' declared_type='cpFloat' type='f'/>
<arg name='min' declared_type='cpFloat' type='f'/>
<arg name='max' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpfclamp01' inline='true'>
<arg name='f' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpflerp' inline='true'>
<arg name='f1' declared_type='cpFloat' type='f'/>
<arg name='f2' declared_type='cpFloat' type='f'/>
<arg name='t' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpflerpconst' inline='true'>
<arg name='f1' declared_type='cpFloat' type='f'/>
<arg name='f2' declared_type='cpFloat' type='f'/>
<arg name='d' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpfmax' inline='true'>
<arg name='a' declared_type='cpFloat' type='f'/>
<arg name='b' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpfmin' inline='true'>
<arg name='a' declared_type='cpFloat' type='f'/>
<arg name='b' declared_type='cpFloat' type='f'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpv' inline='true'>
<arg name='x' const='true' declared_type='cpFloat' type='f'/>
<arg name='y' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvadd' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvclamp' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='len' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvcross' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpvdist' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpvdistsq' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpvdot' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpveql' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpvforangle'>
<arg name='a' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvlength'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpvlengthsq' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpvlerp' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='t' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvlerpconst' inline='true'>
<arg name='v1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='d' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvmult' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='s' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvnear' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='dist' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpBool' type='i'/>
</function>
<function name='cpvneg' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvnormalize' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvnormalize_safe' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvperp' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvproject' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvrotate' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvrperp' inline='true'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvslerp'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='t' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvslerpconst'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='a' const='true' declared_type='cpFloat' type='f'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvstr'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='cpvsub' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='cpvtoangle'>
<arg name='v' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='cpvunrotate' inline='true'>
<arg name='v1' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='v2' const='true' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='k_scalar' inline='true'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='r1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='n' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='k_scalar_body' inline='true'>
<arg name='body' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='r' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='n' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='k_tensor' inline='true'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='r1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='k1' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<arg name='k2' declared_type='cpVect*' type='^{CGPoint=ff}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='mult_k' inline='true'>
<arg name='vr' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='k1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='k2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function name='normal_relative_velocity' inline='true'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='r1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r2' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='n' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpFloat' type='f'/>
</function>
<function name='relative_velocity' inline='true'>
<arg name='a' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='b' declared_type='cpBody*' type='^{cpBody=^?^?ffff{CGPoint=ff}{CGPoint=ff}{CGPoint=ff}fff{CGPoint=ff}^vff{CGPoint=ff}f^{cpSpace}^{cpShape}^{cpArbiter}^{cpConstraint}{cpComponentNode=^{cpBody}^{cpBody}f}}'/>
<arg name='r1' declared_type='cpVect' type='{CGPoint=ff}'/>
<arg name='r2' declared_type='cpVect' type='{CGPoint=ff}'/>
<retval declared_type='cpVect' type='{CGPoint=ff}'/>
</function>
<function_alias name='cpcalloc' original='calloc'/>
<function_alias name='cpfacos' original='acosf'/>
<function_alias name='cpfatan2' original='atan2f'/>
<function_alias name='cpfceil' original='ceilf'/>
<function_alias name='cpfcos' original='cosf'/>
<function_alias name='cpfexp' original='expf'/>
<function_alias name='cpffloor' original='floorf'/>
<function_alias name='cpfmod' original='fmodf'/>
<function_alias name='cpfpow' original='powf'/>
<function_alias name='cpfree' original='free'/>
<function_alias name='cpfsin' original='sinf'/>
<function_alias name='cpfsqrt' original='sqrtf'/>
<function_alias name='cprealloc' original='realloc'/>
</signatures>
