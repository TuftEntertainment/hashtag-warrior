/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_jsb.py -c CocosBuilderReader_jsb.ini" on 2013-04-03
* Script version: v0.6
*/
#import "jsb_config.h"
#if JSB_INCLUDE_COCOSBUILDERREADER

#import "jsb_NS_manual.h"
#import "CCBReader.h"
#import "CCBAnimationManager.h"

// needed for callbacks from objective-c to JS
#import <objc/runtime.h>
#import "JRSwizzle.h"

#import "jsfriendapi.h"
#import "jsb_config.h"
#import "jsb_core.h"

#import "jsb_CocosBuilderReader_classes.h"


/*
 * CCBAnimationManager
 */
#pragma mark - CCBAnimationManager

JSClass* JSB_CCBAnimationManager_class = NULL;
JSObject* JSB_CCBAnimationManager_object = NULL;
// Constructor
JSBool JSB_CCBAnimationManager_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_CCBAnimationManager createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_CCBAnimationManager_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (CCBAnimationManager)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	JSB_del_proxy_for_jsobject( obj );
}

// 'ctor' method. Needed for subclassing native objects in JS
JSBool JSB_CCBAnimationManager_ctor(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_PRECONDITION2( !JSB_get_proxy_for_jsobject(obj), cx, JS_FALSE, "Object already initialzied. error" );

	JSB_CCBAnimationManager *proxy = [[JSB_CCBAnimationManager alloc] initWithJSObject:obj class:[CCBAnimationManager class]];
	[[proxy class] swizzleMethods];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);

	return JS_TRUE;
}

// Arguments: CCNode*, NSDictionary*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_addNode_andSequences_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; NSDictionary* arg1; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	ok &= JSB_jsval_to_NSDictionary( cx, *argvp++, &arg1 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real addNode:arg0 andSequences:(NSDictionary*)arg1  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: 
// Ret value: int (i)
JSBool JSB_CCBAnimationManager_autoPlaySequenceId(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	int ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real autoPlaySequenceId ];

	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));

	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: CGSize (N/A)
JSBool JSB_CCBAnimationManager_containerSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");
	CGSize ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real containerSize:arg0  ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_CGSize( cx, (CGSize)ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_debug(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real debug ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSObject* (o)
JSBool JSB_CCBAnimationManager_delegate(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSObject* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real delegate ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBAnimationManager_documentCallbackNames(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real documentCallbackNames ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBAnimationManager_documentCallbackNodes(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real documentCallbackNodes ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_CCBAnimationManager_documentControllerName(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real documentControllerName ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSString( cx, (NSString*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBAnimationManager_documentOutletNames(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real documentOutletNames ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBAnimationManager_documentOutletNodes(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real documentOutletNodes ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: BOOL (b)
JSBool JSB_CCBAnimationManager_jsControlled(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	BOOL ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real jsControlled ];

	JS_SET_RVAL(cx, vp, BOOLEAN_TO_JSVAL(ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBAnimationManager_keyframeCallbacks(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real keyframeCallbacks ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_CCBAnimationManager_lastCompletedSequenceName(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real lastCompletedSequenceName ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSString( cx, (NSString*) ret_val ));

	return JS_TRUE;
}

// Arguments: CCNode*, CCNode*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_moveAnimationsFromNode_toNode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; id arg1; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg1 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real moveAnimationsFromNode:arg0 toNode:arg1  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSObject* (o)
JSBool JSB_CCBAnimationManager_owner(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSObject* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real owner ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CGSize (N/A)
JSBool JSB_CCBAnimationManager_rootContainerSize(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CGSize ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real rootContainerSize ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_CGSize( cx, (CGSize)ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCNode* (o)
JSBool JSB_CCBAnimationManager_rootNode(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CCNode* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real rootNode ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: int, float
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_runAnimationsForSequenceId_tweenDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; double arg1; 

	ok &= JSB_jsval_to_int32( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real runAnimationsForSequenceId:(int)arg0 tweenDuration:(float)arg1  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_runAnimationsForSequenceNamed_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real runAnimationsForSequenceNamed:(NSString*)arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: NSString*, float
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_runAnimationsForSequenceNamed_tweenDuration_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; double arg1; 

	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real runAnimationsForSequenceNamed:(NSString*)arg0 tweenDuration:(float)arg1  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_CCBAnimationManager_runningSequenceName(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real runningSequenceName ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSString( cx, (NSString*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBAnimationManager_sequences(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	ret_val = [real sequences ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: int
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setAutoPlaySequenceId_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	int32_t arg0; 

	ok &= JSB_jsval_to_int32( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setAutoPlaySequenceId:(int)arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: NSObject*, CCNode*, NSString*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setBaseValue_forNode_propertyName_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; id arg1; NSString* arg2; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg1 );
	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg2 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setBaseValue:arg0 forNode:arg1 propertyName:(NSString*)arg2  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: CCCallBlockN*, NSString*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setCallFunc_forJSCallbackNamed_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; NSString* arg1; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg1 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setCallFunc:arg0 forJSCallbackNamed:(NSString*)arg1  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setDelegate_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setDelegate:arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setDocumentControllerName_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setDocumentControllerName:(NSString*)arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: BOOL
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setJsControlled_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	JSBool arg0; 

	ok &= JS_ValueToBoolean( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setJsControlled:(BOOL)arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: NSObject*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setOwner_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setOwner:arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: CGSize
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setRootContainerSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	CGSize arg0; 

	ok &= JSB_jsval_to_CGSize( cx, *argvp++, (CGSize*) &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setRootContainerSize:(CGSize)arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: CCNode*
// Ret value: void (None)
JSBool JSB_CCBAnimationManager_setRootNode_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBAnimationManager *real = (CCBAnimationManager*) [proxy realObj];
	[real setRootNode:arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

void JSB_CCBAnimationManager_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_CCBAnimationManager_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_CCBAnimationManager_class->name = name;
	JSB_CCBAnimationManager_class->addProperty = JS_PropertyStub;
	JSB_CCBAnimationManager_class->delProperty = JS_PropertyStub;
	JSB_CCBAnimationManager_class->getProperty = JS_PropertyStub;
	JSB_CCBAnimationManager_class->setProperty = JS_StrictPropertyStub;
	JSB_CCBAnimationManager_class->enumerate = JS_EnumerateStub;
	JSB_CCBAnimationManager_class->resolve = JS_ResolveStub;
	JSB_CCBAnimationManager_class->convert = JS_ConvertStub;
	JSB_CCBAnimationManager_class->finalize = JSB_CCBAnimationManager_finalize;
	JSB_CCBAnimationManager_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("addNodeAndSequences", JSB_CCBAnimationManager_addNode_andSequences_, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getAutoPlaySequenceId", JSB_CCBAnimationManager_autoPlaySequenceId, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("containerSize", JSB_CCBAnimationManager_containerSize_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("debug", JSB_CCBAnimationManager_debug, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getDelegate", JSB_CCBAnimationManager_delegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getDocumentCallbackNames", JSB_CCBAnimationManager_documentCallbackNames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getDocumentCallbackNodes", JSB_CCBAnimationManager_documentCallbackNodes, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getDocumentControllerName", JSB_CCBAnimationManager_documentControllerName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getDocumentOutletNames", JSB_CCBAnimationManager_documentOutletNames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getDocumentOutletNodes", JSB_CCBAnimationManager_documentOutletNodes, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getJsControlled", JSB_CCBAnimationManager_jsControlled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getKeyframeCallbacks", JSB_CCBAnimationManager_keyframeCallbacks, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getLastCompletedSequenceName", JSB_CCBAnimationManager_lastCompletedSequenceName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("moveAnimationsFromNodeToNode", JSB_CCBAnimationManager_moveAnimationsFromNode_toNode_, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getOwner", JSB_CCBAnimationManager_owner, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getRootContainerSize", JSB_CCBAnimationManager_rootContainerSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getRootNode", JSB_CCBAnimationManager_rootNode, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("runAnimationsForSequenceIdTweenDuration", JSB_CCBAnimationManager_runAnimationsForSequenceId_tweenDuration_, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("runAnimationsForSequenceNamed", JSB_CCBAnimationManager_runAnimationsForSequenceNamed_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("runAnimationsForSequenceNamedTweenDuration", JSB_CCBAnimationManager_runAnimationsForSequenceNamed_tweenDuration_, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getRunningSequenceName", JSB_CCBAnimationManager_runningSequenceName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getSequences", JSB_CCBAnimationManager_sequences, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setAutoPlaySequenceId", JSB_CCBAnimationManager_setAutoPlaySequenceId_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setBaseValueForNodePropertyName", JSB_CCBAnimationManager_setBaseValue_forNode_propertyName_, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setCallFuncForJSCallbackNamed", JSB_CCBAnimationManager_setCallFunc_forJSCallbackNamed_, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setCompletedAnimationCallback", JSB_CCBAnimationManager_setCompletedAnimationCallbackBlock_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setDelegate", JSB_CCBAnimationManager_setDelegate_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setDocumentControllerName", JSB_CCBAnimationManager_setDocumentControllerName_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setJsControlled", JSB_CCBAnimationManager_setJsControlled_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setOwner", JSB_CCBAnimationManager_setOwner_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setRootContainerSize", JSB_CCBAnimationManager_setRootContainerSize_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setRootNode", JSB_CCBAnimationManager_setRootNode_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("ctor", JSB_CCBAnimationManager_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FS_END
	};

	JSB_CCBAnimationManager_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_CCBAnimationManager_class, JSB_CCBAnimationManager_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_CCBAnimationManager

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_CCBAnimationManager_class, JSB_CCBAnimationManager_object, NULL);
	JSB_CCBAnimationManager *proxy = [[JSB_CCBAnimationManager alloc] initWithJSObject:jsobj class:[CCBAnimationManager class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end

/*
 * CCBReader
 */
#pragma mark - CCBReader

JSClass* JSB_CCBReader_class = NULL;
JSObject* JSB_CCBReader_object = NULL;
// Constructor
JSBool JSB_CCBReader_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
	JSObject *jsobj = [JSB_CCBReader createJSObjectWithRealObject:nil context:cx];
	JS_SET_RVAL(cx, vp, OBJECT_TO_JSVAL(jsobj));
	return JS_TRUE;
}

// Destructor
void JSB_CCBReader_finalize(JSFreeOp *fop, JSObject *obj)
{
	CCLOGINFO(@"jsbindings: finalizing JS object %p (CCBReader)", obj);
//	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(obj);
//	if (proxy) {
//		[[proxy realObj] release];
//	}
	JSB_del_proxy_for_jsobject( obj );
}

// 'ctor' method. Needed for subclassing native objects in JS
JSBool JSB_CCBReader_ctor(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* obj = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_PRECONDITION2( !JSB_get_proxy_for_jsobject(obj), cx, JS_FALSE, "Object already initialzied. error" );

	JSB_CCBReader *proxy = [[JSB_CCBReader alloc] initWithJSObject:obj class:[CCBReader class]];
	[[proxy class] swizzleMethods];

	JS_SET_RVAL(cx, vp, JSVAL_TRUE);

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCBAnimationManager* (o)
JSBool JSB_CCBReader_actionManager(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CCBAnimationManager* ret_val;

	CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real actionManager ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBReader_animationManagersForNodes(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real animationManagersForNodes ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSString* (S)
JSBool JSB_CCBReader_ccbDirectoryPath_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSString* ret_val;

	ret_val = [CCBReader ccbDirectoryPath ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSString( cx, (NSString*) ret_val ));

	return JS_TRUE;
}

// Arguments: NSString*, NSObject*, CGSize
// Ret value: CCNode* (o)
JSBool JSB_CCBReader_nodeGraphFromFile_owner_parentSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION2( argc >= 1 && argc <= 3 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; id arg1; CGSize arg2; 

	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg0 );
	if (argc >= 2) {
		ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg1 );
	}
	if (argc >= 3) {
		ok &= JSB_jsval_to_CGSize( cx, *argvp++, (CGSize*) &arg2 );
	}
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");
	CCNode* ret_val;

	if( argc == 1 ) {
		ret_val = [CCBReader nodeGraphFromFile:(NSString*)arg0  ];
	}
	else if( argc == 2 ) {
		ret_val = [CCBReader nodeGraphFromFile:(NSString*)arg0 owner:arg1  ];
	}
	else if( argc == 3 ) {
		ret_val = [CCBReader nodeGraphFromFile:(NSString*)arg0 owner:arg1 parentSize:(CGSize)arg2  ];
	}
	else
		JSB_PRECONDITION2(NO, cx, JS_FALSE, "Error in number of arguments");


	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: NSString*, NSObject*, CGSize
// Ret value: CCNode* (o)
JSBool JSB_CCBReader_nodeGraphFromFile_owner_parentSize_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc >= 1 && argc <= 3 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; id arg1; CGSize arg2; 

	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg0 );
	if (argc >= 2) {
		ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg1 );
	}
	if (argc >= 3) {
		ok &= JSB_jsval_to_CGSize( cx, *argvp++, (CGSize*) &arg2 );
	}
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");
	CCNode* ret_val;

	if( argc == 1 ) {
		CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real nodeGraphFromFile:(NSString*)arg0  ];
	}
	else if( argc == 2 ) {
		CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real nodeGraphFromFile:(NSString*)arg0 owner:arg1  ];
	}
	else if( argc == 3 ) {
		CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real nodeGraphFromFile:(NSString*)arg0 owner:arg1 parentSize:(CGSize)arg2  ];
	}
	else
		JSB_PRECONDITION2(NO, cx, JS_FALSE, "Error in number of arguments");


	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBReader_nodesWithAnimationManagers(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real nodesWithAnimationManagers ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBReader_ownerCallbackNames(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real ownerCallbackNames ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBReader_ownerCallbackNodes(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real ownerCallbackNodes ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBReader_ownerOutletNames(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real ownerOutletNames ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: NSMutableArray* (array)
JSBool JSB_CCBReader_ownerOutletNodes(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	NSMutableArray* ret_val;

	CCBReader *real = (CCBReader*) [proxy realObj];
	ret_val = [real ownerOutletNodes ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSArray( cx, (NSArray*) ret_val ));

	return JS_TRUE;
}

// Arguments: 
// Ret value: CCBReader* (o)
JSBool JSB_CCBReader_reader_static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION2( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	CCBReader* ret_val;

	ret_val = [CCBReader reader ];

	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: NSString*, NSObject*, CGSize
// Ret value: CCScene* (o)
JSBool JSB_CCBReader_sceneWithNodeGraphFromFile_owner_parentSize__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION2( argc >= 1 && argc <= 3 , cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; id arg1; CGSize arg2; 

	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg0 );
	if (argc >= 2) {
		ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg1 );
	}
	if (argc >= 3) {
		ok &= JSB_jsval_to_CGSize( cx, *argvp++, (CGSize*) &arg2 );
	}
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");
	CCScene* ret_val;

	if( argc == 1 ) {
		ret_val = [CCBReader sceneWithNodeGraphFromFile:(NSString*)arg0  ];
	}
	else if( argc == 2 ) {
		ret_val = [CCBReader sceneWithNodeGraphFromFile:(NSString*)arg0 owner:arg1  ];
	}
	else if( argc == 3 ) {
		ret_val = [CCBReader sceneWithNodeGraphFromFile:(NSString*)arg0 owner:arg1 parentSize:(CGSize)arg2  ];
	}
	else
		JSB_PRECONDITION2(NO, cx, JS_FALSE, "Error in number of arguments");


	JS_SET_RVAL(cx, vp, JSB_jsval_from_NSObject(cx, ret_val));

	return JS_TRUE;
}

// Arguments: CCBAnimationManager*
// Ret value: void (None)
JSBool JSB_CCBReader_setActionManager_(JSContext *cx, uint32_t argc, jsval *vp) {

	JSObject* jsthis = (JSObject *)JS_THIS_OBJECT(cx, vp);
	JSB_NSObject *proxy = (JSB_NSObject*) JSB_get_proxy_for_jsobject(jsthis);

	JSB_PRECONDITION2( proxy && [proxy realObj], cx, JS_FALSE, "Invalid Proxy object");
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	id arg0; 

	ok &= JSB_jsval_to_NSObject( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	CCBReader *real = (CCBReader*) [proxy realObj];
	[real setActionManager:arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: float
// Ret value: void (None)
JSBool JSB_CCBReader_setResolutionScale__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	[CCBReader setResolutionScale:(float)arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

// Arguments: NSString*
// Ret value: void (None)
JSBool JSB_CCBReader_setResourcePath__static(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION2( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	NSString* arg0; 

	ok &= JSB_jsval_to_NSString( cx, *argvp++, &arg0 );
	JSB_PRECONDITION2(ok, cx, JS_FALSE, "Error processing arguments");

	[CCBReader setResourcePath:(NSString*)arg0  ];

	JS_SET_RVAL(cx, vp, JSVAL_VOID);

	return JS_TRUE;
}

void JSB_CCBReader_createClass(JSContext *cx, JSObject* globalObj, const char* name )
{
	JSB_CCBReader_class = (JSClass *)calloc(1, sizeof(JSClass));
	JSB_CCBReader_class->name = name;
	JSB_CCBReader_class->addProperty = JS_PropertyStub;
	JSB_CCBReader_class->delProperty = JS_PropertyStub;
	JSB_CCBReader_class->getProperty = JS_PropertyStub;
	JSB_CCBReader_class->setProperty = JS_StrictPropertyStub;
	JSB_CCBReader_class->enumerate = JS_EnumerateStub;
	JSB_CCBReader_class->resolve = JS_ResolveStub;
	JSB_CCBReader_class->convert = JS_ConvertStub;
	JSB_CCBReader_class->finalize = JSB_CCBReader_finalize;
	JSB_CCBReader_class->flags = 0;

	static JSPropertySpec properties[] = {
		{0, 0, 0, 0, 0}
	};
	static JSFunctionSpec funcs[] = {
		JS_FN("getActionManager", JSB_CCBReader_actionManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getAnimationManagersForNodes", JSB_CCBReader_animationManagersForNodes, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("load", JSB_CCBReader_nodeGraphFromFile_owner_parentSize_, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getNodesWithAnimationManagers", JSB_CCBReader_nodesWithAnimationManagers, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getOwnerCallbackNames", JSB_CCBReader_ownerCallbackNames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getOwnerCallbackNodes", JSB_CCBReader_ownerCallbackNodes, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getOwnerOutletNames", JSB_CCBReader_ownerOutletNames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("getOwnerOutletNodes", JSB_CCBReader_ownerOutletNodes, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setActionManager", JSB_CCBReader_setActionManager_, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("ctor", JSB_CCBReader_ctor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FS_END
	};
	static JSFunctionSpec st_funcs[] = {
		JS_FN("ccbDirectoryPath", JSB_CCBReader_ccbDirectoryPath_static, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("load", JSB_CCBReader_nodeGraphFromFile_owner_parentSize__static, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("create", JSB_CCBReader_reader_static, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("loadScene", JSB_CCBReader_sceneWithNodeGraphFromFile_owner_parentSize__static, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setResolutionScale", JSB_CCBReader_setResolutionScale__static, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FN("setResourcePath", JSB_CCBReader_setResourcePath__static, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
		JS_FS_END
	};

	JSB_CCBReader_object = JS_InitClass(cx, globalObj, JSB_NSObject_object, JSB_CCBReader_class, JSB_CCBReader_constructor,0,properties,funcs,NULL,st_funcs);
	JSBool found;
	JS_SetPropertyAttributes(cx, globalObj, name, JSPROP_ENUMERATE | JSPROP_READONLY, &found);
}

@implementation JSB_CCBReader

+(JSObject*) createJSObjectWithRealObject:(id)realObj context:(JSContext*)cx
{
	JSObject *jsobj = JS_NewObject(cx, JSB_CCBReader_class, JSB_CCBReader_object, NULL);
	JSB_CCBReader *proxy = [[JSB_CCBReader alloc] initWithJSObject:jsobj class:[CCBReader class]];
	[proxy setRealObj:realObj];

	if( realObj ) {
		objc_setAssociatedObject(realObj, &JSB_association_proxy_key, proxy, OBJC_ASSOCIATION_RETAIN);
		[proxy release];
	}

	[self swizzleMethods];

	return jsobj;
}

@end


#endif // JSB_INCLUDE_COCOSBUILDERREADER
